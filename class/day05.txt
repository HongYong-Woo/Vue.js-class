지금까지 우리가 기본 문법의 대부분 Vue2에서 사용하는 옵션스API 방법이었다.

요구하는 기능이 복잡해지고 다양한 로직을 유연하고 조직적으로 구성하고 관리하기 위한 방법
으로 Vue3에서는 z컴포지션API를 제공한다.

함수 기반 접근 방식 제공하여 개발자가 기능별로 코드를 구성 할 수 있게 지원한다.

옵션스API : data, computed, methods, lifecycle hook 포함한 객체 기반 옵션 속성으로 구성된 API
레거시(legacy) 프로젝트 : 현재 유지되고 있는 서비스

컴포지션 API는 옵션스 API의 대체가 아닌 확장의 목적으로 도입됨

-setup() 훅(hook) 내에서 Vue3에서 추가된 컴포지션API 사용이 가능하다.

설탕문법(sugar syntax) 형태의 <script setup></script>

1. 뷰에서는 컴포넌트 전반에 사용하는 데이터(값) 정의 방법을 알아야 한다.
    옵션스 API애서는 반응형 데이터를 data옵션 객체를 이용하여 데이터 속성을 정의하였다.
    컴포지션 API에서는 ref(), reactive() 함수를 사용한다.

    -ref()
        어떤 값을 사용해 반응성 데이터를 정의 할 것인지.
        이때 사용하는 값의 자료형은 숫자, 기본자료형, 참조자료형 구분없이 사용 가능 (내부 데이터까지 반응성을 제공)

    -참조 자료형에 대한 반응성을 제공하기 위해서는 reactive()
     값 자체를 반응형으로 만들어 리턴한다.

2. 옵션스 API에서는 template 태그의 DOM 요소에 접근하려면 $ref 전역 속성을 사용해야 한다.
    컴포지션API에서는 ref()함수로 생성한 반응형 데이터를 
    HTML태그의 ref 속성의 값으로 지정해서 DOM 요소를 참조 할 수 있다.

    8. 뷰 라우터를 이용한 라우팅 기능
    웹브라우저에서 사용자가 요청한 URL(도메인)에 따라 서버로부터 해당 서비스를 처리한 페이지를 화면에 렌더링한다.

    현재 대부분의 웹서비스는 SPA: 싱글페이지 어플리케이션 방식을 채택하고 있다.
    첫페이지 로딩시 서버로부터 필요한 모든 자원을 한번에 불러온뒤 사용자와 상호작용에 따라 동적으로 화면을 갱신하는 방식이다.

    사용자의 URL 요청에 따라 다른 페이지를 보여주는 기능이 필요하다.
    뷰 라우터를 제공하여 브라우저의 URL 과 어플리케이션의 뷰를 연결해 준다.
    SPA 에서 URL의 변화에 따라 적절한 컴포넌트를 화면에 렌더링하도록 도와주는 기능

    1. 기본 원리
    2. 다양한 라우팅 기법
    3. 동적 라우트 매칭 방법
    4. 중첩 라우트
    5. 네비게이션

vue 동작순서
1. 뷰 라우터 라이브러리 설치 : npm install vue-router@4
2. 라우팅 컴포넌트 생성 src/views/view 컴포넌트
3. 라우터 인스턴스 생성 src/router/index.js
4. 라우터 인스턴스 등록 src/main.js

    9. 동적 경로 매칭
        URL이 ./views/UserView/ => /user/jane   id세그먼트 값이 jane 사용자 정보를 UseView 컴포넌트